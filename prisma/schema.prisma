generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  emailVerified DateTime?
  name          String?
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  password      String?
  firstname     String?
  lastname      String?
  username      String?        @unique
  dob           DateTime?
  bio           String         @default("Hello !!!")
  phone         BigInt?        @unique
  pic           String?
  lastSeenAt    DateTime       @default(now())
  provider      Provider
  chatsSent     Chats[]        @relation("SentChats")
  chatsReceived Chats[]        @relation("ReceivedChats")
  comments      Comment[]
  notifications Notification[]
  posts         Post[]
  following     Relations[]    @relation("Following")
  followers     Relations[]    @relation("Followers")
  seenPosts     SeenPost[]
  likedPosts    Post[]         @relation("PostLikes")

  @@index([createdAt])
  @@index([lastSeenAt])
}

model OTPTable {
  id     Int      @id @default(autoincrement())
  email  String   @unique
  otp    String
  expiry DateTime @default(now())

  @@index([expiry])
}

model Post {
  id            Int            @id @default(autoincrement())
  title         String
  visiblity     Viewers        @default(Public)
  authorId      String
  isMedia       Boolean
  mediaurl      String?
  createdAt     DateTime       @default(now())
  comments      Comment[]
  notifications Notification[]
  author        User           @relation(fields: [authorId], references: [id])
  seenBy        SeenPost[]
  likes         User[]         @relation("PostLikes")

  @@index([authorId])
  @@index([createdAt])
  @@index([isMedia])
  @@index([visiblity])
}

model Comment {
  commentId String   @id @default(ulid())
  userId    String
  postId    Int
  content   String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([postId])
  @@index([createdAt])
}

model Relations {
  id        Int          @id @default(autoincrement())
  srcid     String
  destid    String
  type      Relationship
  createdAt DateTime     @default(now())
  dest      User         @relation("Following", fields: [destid], references: [id])
  src       User         @relation("Followers", fields: [srcid], references: [id])

  @@unique([srcid, destid])
  @@index([srcid])
  @@index([destid])
  @@index([type])
  @@index([createdAt])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    String
  postid    Int
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postid], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([postid])
  @@index([isRead])
  @@index([createdAt])
}

model SeenPost {
  id     Int      @id @default(autoincrement())
  userId String
  postId Int
  seenAt DateTime @default(now())
  post   Post     @relation(fields: [postId], references: [id])
  user   User     @relation(fields: [userId], references: [id])

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
  @@index([seenAt])
}

model Chats {
  id              Int   @id @default(autoincrement())
  fromId          String
  toId            String
  type            ChatType
  mediaUrl        String?
  message         String?
  isSeen          Boolean? @default(false)
  isDeletedByFrom Boolean  @default(false)
  isDeletedByTo   Boolean  @default(false)
  createdAt       DateTime @default(now())
  from            User     @relation("SentChats", fields: [fromId], references: [id])
  to              User     @relation("ReceivedChats", fields: [toId], references: [id])

  @@index([fromId])
  @@index([toId])
  @@index([type])
  @@index([isSeen])
  @@index([createdAt])
}

enum Viewers {
  Public
  Followers
}

enum Relationship {
  Follower
  Blocked
}

enum Provider {
  Google
  Email
}

enum ChatType {
  Message
  Call
  VideoCall
}
