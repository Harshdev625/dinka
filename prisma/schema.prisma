generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Viewers {
  Public
  Followers
}

enum Relationship {
  Follower
  Blocked
}
enum Provider{
  Google
  Email
}

enum ChatType {
  Message
  Call
  VideoCall
}

model User {
  id             String    @id @default(uuid()) // required for adapter
  email          String   @unique
  emailVerified  DateTime?
  name           String?
  image          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  password        String?
  firstname       String?
  lastname        String?
  username        String?  @unique
  dob             DateTime?
  bio             String @default("Hello !!!")
  phone           BigInt?  @unique
  pic             String?
  lastSeenAt      DateTime @default(now())
  provider        Provider
  posts           Post[]
  comments        Comment[]
  likedPosts      Post[]         @relation("PostLikes")
  following       Relations[]    @relation("Following")
  followers       Relations[]    @relation("Followers")
  notifications   Notification[]
  seenPosts       SeenPost[]
  chatsSent       Chats[]        @relation("SentChats")
  chatsReceived   Chats[]        @relation("ReceivedChats")

  @@index([createdAt])
  @@index([lastSeenAt])
}

model OTPTable {
  id     Int      @id @default(autoincrement())
  email  String   @unique
  otp    String
  expiry DateTime @default(now())

  @@index([expiry])
}

model Post {
  id         Int      @id @default(autoincrement())
  title      String
  visiblity  Viewers  @default(Public)
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String
  isMedia    Boolean
  mediaurl   String?
  createdAt  DateTime @default(now())

  likes         User[]         @relation("PostLikes")
  comments      Comment[]
  notifications Notification[]
  seenBy        SeenPost[]

  @@index([authorId])
  @@index([createdAt])
  @@index([isMedia])
  @@index([visiblity])
}

model Comment {
  commentId String   @id @default(ulid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  content   String
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([postId])
  @@index([createdAt])
}

model Relations {
  id        Int      @id @default(autoincrement())
  src       User     @relation("Followers", fields: [srcid], references: [id])
  dest      User     @relation("Following", fields: [destid], references: [id])
  srcid     String
  destid    String
  type      Relationship
  createdAt DateTime @default(now())

  @@unique([srcid, destid])
  @@index([srcid])
  @@index([destid])
  @@index([type])
  @@index([createdAt])
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postid], references: [id])
  postid    Int
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([postid])
  @@index([isRead])
  @@index([createdAt])
}

model SeenPost {
  id       Int      @id @default(autoincrement())
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  post     Post     @relation(fields: [postId], references: [id])
  postId   Int
  seenAt   DateTime @default(now())

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
  @@index([seenAt])
}

model Chats {
  id              BigInt   @id @default(autoincrement())
  from            User     @relation("SentChats", fields: [fromId], references: [id])
  fromId          String
  to              User     @relation("ReceivedChats", fields: [toId], references: [id])
  toId            String
  type            ChatType
  mediaUrl        String?
  message         String?
  isSeen          Boolean? @default(false)
  isDeletedByFrom Boolean  @default(false)
  isDeletedByTo   Boolean  @default(false)
  createdAt       DateTime @default(now())

  @@index([fromId])
  @@index([toId])
  @@index([type])
  @@index([isSeen])
  @@index([createdAt])
}
